:DOC-CONFIG:
#+property: header-args :emacs-lisp :tangle config.el
#+property: header-args :mkdirp yes :comments no :results output silent
#+startup: fold
:END:
#+HTML_HEAD: <link rel="stylesheet" href="https://latex.now.sh/style.css">

This file gets tangled into [[file:config.el]], [[file:init.el]], and
[[file:packages.el]].

* References
This is not a complete list. I have read though many people's configs
and sometimes I forget to remember where I got a snippet or some
inspiration from.

- [[https:https://github.com/zzamboni/dot-doom][zzamboni's doom emacs config]]
- [[https://tecosaur.github.io/emacs-config/config.html][tecosaur's doom emacs config]]
- [[https://gitlab.com/dwt1/dotfiles/-/blob/master/.config/doom/config.org][dt's doom emacs config]]

* Config file headers
We start by simply defining the standard headers used by the three
files. These headers come from the initial files generated by
=doom install=, and contain either some Emacs-LISP relevant indicators
like =lexical-binding=, or instructions about the contents of the file.

#+html: <details><summary>init.el</summary>

#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).
#+end_src

#+html: </details>

#+html: <details><summary>packages.el</summary>

#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.

;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;;(package! another-package
;;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;;(package! this-package
;;  :recipe (:host github :repo "username/repo"
;;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;;(package! builtin-package :recipe (:nonrecursive t))
;;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;;(package! builtin-package :pin "1a2b3c4d5e")

;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;;(unpin! pinned-package)
;; ...or multiple packages
;;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;;(unpin! t)
#+end_src

#+html: </details>

#+html: <details><summary>config.el</summary>

#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
;; (setq user-full-name "John Doe"
;;      user-mail-address "john@doe.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; (setq doom-theme 'doom-one)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
;; (setq org-directory "~/org/")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
;; (setq display-line-numbers-type t)

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src

#+html: </details>

* Doom modules config
This is the entirety of my =init.el= file. This configures all of the
doom modules

#+html: <details><summary>Doom config</summary>

#+begin_src emacs-lisp :tangle init.el
(doom!
#+end_src

** Input

#+html: <details><summary>input</summary>

I don't need any of these, and so I have these disabled.

#+begin_src emacs-lisp :tangle init.el
:input
;;chinese
;;japanese
;;layout
#+end_src

#+html: </details>

** Completion

#+html: <details><summary>completion</summary>

#+begin_src emacs-lisp :tangle init.el
:completion
(company
 +childframe)
;;helm
;;ido
(ivy
 +fuzzy
 +icons
 +prescient)
;; (vertico
;;  +icons)
#+end_src

#+html: </details>
** UI

#+html: <details><summary>ui</summary>

#+begin_src emacs-lisp :tangle init.el
:ui
#+end_src

I like the default emacs look a lot, so I pretty much just like to keep
it the same here.

#+begin_src emacs-lisp :tangle init.el
doom
doom-dashboard
#+end_src

Emojis and unicode are nice since sometimes I open files with emojis or
unicode or both in them.

#+begin_src emacs-lisp :tangle init.el
(emoji
 +unicode
 +github)
unicode
#+end_src

I find =doom-quit= cute so here it is.

#+begin_src emacs-lisp :tangle init.el
doom-quit
#+end_src

These all in some way or another make code easier for me to read or make
the UI of emacs display some information that I like.

#+begin_src emacs-lisp :tangle init.el
hl-todo             ; highlight TODO/FIXME/NOTE, etc.
indent-guides       ; highlights indent columns
(ligatures
 +extra)
(modeline
 +light)
nav-flash           ; blink cursor line after big motions
ophints
(popup
 +all
 +defaults)
vc-gutter
workspaces
zen
#+end_src

I love how quick and easy =deft= makes it to take down a quick note that
may or may not relate to the current file This makes it much easier to
live in /emacs/ and not have to leave to another app.

#+begin_src emacs-lisp :tangle init.el
deft
#+end_src

#+html: <details><summary>disabled ui modules</summary>

For some reason or another I don't have each of these enabled.

#+begin_src emacs-lisp :tangle init.el
;;hydra
;;minimap           ; show a map of the code on the side
;;neotree           ; a project drawer, like NERDTree for vim
;;tabs
;;treemacs
;;vi-tilde-fringe
;;window-select     ; visually switch windows
#+end_src

#+html: </details>
#+html: </details>

** Editor

#+html: <details><summary>editor</summary>

There isn't really much to say here, most of these are self explanatory.

#+begin_src emacs-lisp :tangle init.el
:editor
(evil +everywhere)  ; come to the dark side, we have cookies
file-templates      ; auto-snippets for empty files
fold                ; (nigh) universal code folding
(format +onsave)    ; automated prettiness
;;god               ; run Emacs commands without modifier keys
;;lispy             ; vim for emacs-lisp, for people who don't like vim
multiple-cursors    ; editing in many places at once
;;objed             ; text object editing for the innocent
;;parinfer          ; turn emacs-lisp into python, sort of
;;rotate-text       ; cycle region at point between text candidates
snippets            ; my elves. They type so I don't have to
word-wrap           ; soft wrapping with language-aware indent
#+end_src

#+html: </details>

** Emacs

#+html: <details><summary>emacs</summary>

Not much to say here other than that I use these and put them here.

#+begin_src emacs-lisp :tangle init.el
:emacs
(dired      ; making dired pretty [functional]
 +ranger
 +icons)
electric    ; smarter, keyword-based electric-indent
(ibuffer    ; interactive buffer management
 +icons)
(undo       ; persistent, smarter undo for your inevitable mistakes
 +tree)
vc          ; version-control and Emacs, sitting in a tree
#+end_src

#+html: </details>

** Term

#+html: <details><summary>Term</summary>

I think vterm is the best terminal for /emacs/ and is the only one I've
liked so far.

#+begin_src emacs-lisp :tangle init.el
:term
;;eshell
;;shell
;;term
vterm
#+end_src

#+html: </details>

** Checkers

#+html: <details><summary>checkers</summary>

I tend to make a lot of silly mistakes. I couldn't imagine trying to
write anything without error checking

#+begin_src emacs-lisp :tangle init.el
:checkers
syntax
(spell
 +aspell
 +everywhere)
grammar
#+end_src

#+html: </details>

** Tools

#+html: <details><summary>tools</summary>

These tools are so basic to my workflow that they can never be disabled.
These are part of the reason I use /emacs/.

#+begin_src emacs-lisp :tangle init.el
:tools
(debugger
 +lsp)
biblio
(eval
 +overlay)
gist
(lookup
 +dictionary
 +offline)
(lsp
 +peek)
magit
make
(pass
 +auth)
pdf
taskrunner
#+end_src

These are just other tools that I have disabled.

#+begin_src emacs-lisp :tangle init.el
;;ansible
;;direnv
;;docker
;;ein
;;editorconfig      ; let someone else argue about tabs vs spaces
;;prodigy           ; FIXME managing external services & code builders
;;rgb               ; creating color strings
;;terraform         ; infrastructure as code
;;tmux              ; an API for interacting with tmux
;;upload            ; map local to remote projects via ssh/ftp
#+end_src

#+html: </details>

** OS

#+html: <details><summary>os</summary>

Exactly the same as the default emacs config.

#+begin_src emacs-lisp :tangle init.el
:os
(:if IS-MAC macos)  ; improve compatibility with macOS
;;tty               ; improve the terminal Emacs experience
#+end_src

#+html: </details>

** Lang

#+html: <details><summary>lang</summary>

I write code in many different languages, both because of school and
because I like to. When I code, I usually prefer to have a language
server, and so this section ends up making my config pretty heavy
overall. I very often come here and enable or disable a language.

#+begin_src emacs-lisp :tangle init.el
:lang
;;agda              ; types of types of types of types...
;;beancount         ; mind the GAAP
(cc
 +lsp)           ; C > C++ == 1 might add +lsp
;;clojure           ; java with a  emacs-lisp
;;common-lisp       ; if you've seen one emacs-lisp, you've seen them all
;;coq               ; proofs-as-programs
;;crystal           ; ruby at the speed of c
;;csharp            ; unity, .NET, and mono shenanigans
;;data              ; config/data formats
;(dart
 ;+flutter)   ; paint ui and not much else
;;elixir            ; erlang done right
;;elm               ; care for a cup of TEA?
emacs-lisp        ; drown in parentheses
;;erlang            ; an elegant language for a more civilized age
;;ess               ; emacs speaks statistics
;;factor
;;faust             ; dsp, but you get to keep your soul
;;fsharp            ; ML stands for Microsoft's Language
;;fstar             ; (dependent) types and (monadic) effects and Z3
;;gdscript          ; the language you waited for
;;(go +lsp)         ; the hipster dialect
;;(haskell +dante)  ; a language that's lazier than I am
;;hy                ; readability of scheme w/ speed of python
;;idris             ; a language you can depend on
json                ; At least it ain't XML
;;(java +meghanada) ; the poster child for carpal tunnel syndrome
;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
;;julia             ; a better, faster MATLAB
;;kotlin            ; a better, slicker Java(Script)
(latex
 +cdlatex)            ; writing papers in Emacs has never been so fun
;;lean              ; for folks with too much to prove
;;ledger            ; be audit you can be
;;lua               ; one-based indices? one-based indices
markdown            ; writing docs for people to ignore
;;nim               ; python + emacs-lisp at the speed of c
;;nix               ; I hereby declare "nix geht mehr!"
;;ocaml             ; an objective camel
(org
 +dragndrop
 +gnuplot
 +hugo
 +journal
 +noter
 +org-bullets
 +present
 +pretty
 +roam2)            ; organize your plain life in plain text
;;php               ; perl's insecure younger brother
plantuml            ; diagrams for confusing people more
;;purescript        ; javascript, but functional
(python             ; beautiful is better than ugly
 +lsp
 +pyright)
;;qt                ; the 'cutest' gui framework ever
;;racket            ; a DSL for DSLs
;;raku              ; the artist formerly known as perl6
;;rest              ; Emacs as a REST client
;;rst               ; ReST in peace
;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
(rust
 +lsp)              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
;;scala             ; java, but good
;;(scheme +guile)   ; a fully conniving family of emacs-lisps
(sh                 ; she sells {ba,z,fi}sh shells on the C xor
 +fish)
;;sml
;;solidity          ; do you need a blockchain? No.
;;swift             ; who asked for emoji variables?
;;terra             ; Earth and Moon in alignment for performance.
;;web               ; the tubes
yaml                ; JSON, but readable
;;zig               ; C, but simpler
#+end_src

#+html: </details>

** Email

#+html: <details><summary>email</summary>

#+begin_src emacs-lisp :tangle init.el
:email
(mu4e
 +gmail
 +org)
;;notmuch
;;(wanderlust +gmail)
#+end_src

#+html: </details>

** App

#+html: <details><summary>app</summary>
#+begin_src emacs-lisp :tangle init.el
:app
;;calendar
;;emms
;;everywhere        ; *leave* Emacs!? You must be joking
;;irc               ; how neckbeards socialize
;;(rss +org)        ; emacs as an RSS reader
;;twitter           ; twitter client https://twitter.com/vnought
#+end_src
#+html: </details>
** Config

#+html: <details><summary>config</summary>

#+begin_src emacs-lisp :tangle init.el
:config
literate
(default
  +bindings
  +smartparens)
#+end_src

#+html: </details>

** Closing

#+html: <details><summary>This is just a parenthesis, don't look </summary>

#+begin_src emacs-lisp :tangle init.el
)
#+end_src

#+html: </details>
#+html: </details>

* General config
** My personal info.
#+begin_src  emacs-lisp
(setq user-full-name "Kirols Bakheat"
      user-mail-address "kbakheat@gmail.com")
#+end_src

** Add my snippets
This loads up my personal yasnipptes and adds them to the ones provided by doom.
#+begin_src emacs-lisp
(setq my/snippets-dir "~/.config/doom/snippets")
(eval-after-load 'yasnippet
  (lambda () (add-to-list 'yas-snippet-dirs 'my/snippets-dir)
  (yas-load-directory my/snippets-dir t)))
#+end_src
** Keybindings
*** Keybindings for my mac.
#+begin_src  emacs-lisp
(cond (IS-MAC
       (setq mac-command-modifier       'meta
             mac-option-modifier        'meta
             mac-right-option-modifier  'alt
             mac-pass-control-to-system nil)))
#+end_src

*** Remap eval
As much as I like /"M-x"/ to type commands, I think /"SPC ;"/ is sometimes easier to hit. Unfortunately, it uses =pp-eval-expression= instead of =execute-extended-command=. This is here to remedy that and switch the two.
#+begin_src emacs-lisp
(map! :leader
      (:desc "M-x" ";" #'execute-extended-command)
      (:desc "eval-expression" ":" #'pp-eval-expression))
#+end_src
*** xwidget-webkit browser
#+begin_src emacs-lisp
(defun my/xwidget-window-close ()
  "Alternative to `evil-collection-xwidget-webkit-close-tab'. This both closes the tab and closes the window"
  (interactive)
  (evil-collection-xwidget-webkit-close-tab)
  (evil-window-delete)
  (xwidget-cleanup))
(map! :map xwidget-webkit-mode-map
      :n "q" 'my/xwidget-window-close)
#+end_src

#+begin_src emacs-lisp
(map! :leader
      (:desc "xwidget-webkit" "o w" #'xwidget-webkit-browse-url))
#+end_src
*** =toggle-debug-on-error=
#+begin_src emacs-lisp
(map! :leader
      (:desc "Debug on error" "t d" #'toggle-debug-on-error))
#+end_src
*** Pass
#+begin_src emacs-lisp
(map! :leader
      (:desc "Pass" "o p" #'pass))
#+end_src
** Global auto revert mode
Enable =global-auto-revert-mode= in buffers like =dired=.
#+begin_src emacs-lisp
(setq global-auto-revert-non-file-buffers t)
#+end_src

** (Un)comment lines
#+begin_src emacs-lisp
(map! :leader
       (:desc "Comment/uncomment lines" "t /" #'comment-line))
#+end_src
** Auto save my files
#+begin_src  emacs-lisp
(setq auto-save-default t
      make-backup-files t)
#+end_src

** UI
#+begin_src emacs-lisp
(setq
 display-line-numbers-type 'relative
 which-key-idle-delay 0.1)
(+global-word-wrap-mode +1)
#+end_src

*** Modeline
#+begin_src emacs-lisp
(unless
    (equal
     "Battery status not available"
     (battery))
  (display-battery-mode 1)
  (setq battery-mode-line-format "[%b%p%% %t]"))
(setq doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))
#+end_src
*** Themes
#+begin_src emacs-lisp
(solaire-global-mode +1)
(map! :leader
      :desc "Load new theme" "h t" #'load-theme)
#+end_src
**** Modus Themes
#+begin_src emacs-lisp
(setq
 modus-themes-italic-constructs t
 modus-themes-bold-constructs t
 modus-themes-mixed-fonts t
 modus-themes-subtle-line-numbers nil
 modus-themes-intense-mouseovers t
 modus-themes-deuteranopia nil
 modus-themes-tabs-accented t
 modus-themes-variable-pitch-ui t
 modus-themes-inhibit-reload t ; only applies to `customize-set-variable' and related

 modus-themes-fringes 'intense ; {nil,'subtle,'intense}

 ;; Options for `modus-themes-lang-checkers' are either nil (the
 ;; default), or a list of properties that may include any of those
 ;; symbols: `straight-underline', `text-also', `background',
 ;; `intense' OR `faint'.
 modus-themes-lang-checkers '(straight-underline text-also background faint)

 ;; Options for `modus-themes-mode-line' are either nil, or a list
 ;; that can combine any of `3d' OR `moody', `borderless',
 ;; `accented', a natural number for extra padding (or a cons cell
 ;; of padding and NATNUM), and a floating point for the height of
 ;; the text relative to the base font size (or a cons cell of
 ;; height and FLOAT)
 modus-themes-mode-line '(borderless accented)

 ;; Options for `modus-themes-markup' are either nil, or a list
 ;; that can combine any of `bold', `italic', `background',
 ;; `intense'.
 modus-themes-markup '(bold background intense)

 ;; Options for `modus-themes-syntax' are either nil (the default),
 ;; or a list of properties that may include any of those symbols:
 ;; `faint', `yellow-comments', `green-strings', `alt-syntax'
 modus-themes-syntax '(yellow-comments green-strings alt-syntax)

 ;; Options for `modus-themes-hl-line' are either nil (the default),
 ;; or a list of properties that may include any of those symbols:
 ;; `accented', `underline', `intense'
 modus-themes-hl-line '(accented)

 ;; Options for `modus-themes-paren-match' are either nil (the
 ;; default), or a list of properties that may include any of those
 ;; symbols: `bold', `intense', `underline'
 modus-themes-paren-match '(bold intense)

 ;; Options for `modus-themes-links' are either nil (the default),
 ;; or a list of properties that may include any of those symbols:
 ;; `neutral-underline' OR `no-underline', `faint' OR `no-color',
 ;; `bold', `italic', `background'
 modus-themes-links '(neutral-underline italic)

 ;; Options for `modus-themes-box-buttons' are either nil (the
 ;; default), or a list that can combine any of `flat',
 ;; `accented', `faint', `variable-pitch', `underline',
 ;; `all-buttons', the symbol of any font weight as listed in
 ;; `modus-themes-weights', and a floating point number
 ;; (e.g. 0.9) for the height of the button's text.
 modus-themes-box-buttons nil

 ;; Options for `modus-themes-prompts' are either nil (the
 ;; default), or a list of properties that may include any of those
 ;; symbols: `background', `bold', `gray', `intense', `italic'
 modus-themes-prompts '(background bold intense italic)

 ;; The `modus-themes-completions' is an alist that reads three
 ;; keys: `matches', `selection', `popup'.  Each accepts a nil
 ;; value (or empty list) or a list of properties that can include
 ;; any of the following (for WEIGHT read further below):
 ;;
 ;; `matches' - `background', `intense', `underline', `italic', WEIGHT
 ;; `selection' - `accented', `intense', `underline', `italic', `text-also', WEIGHT
 ;; `popup' - same as `selected'
 ;; `t' - applies to any key not explicitly referenced (check docs)
 ;;
 ;; WEIGHT is a symbol such as `semibold', `light', or anything
 ;; covered in `modus-themes-weights'.  Bold is used in the absence
 ;; of an explicit WEIGHT.
 modus-themes-completions
 '((matches . (semibold))
   (selection . (extrabold accented))
   (popup . (extrabold accented)))

 modus-themes-mail-citations 'faint ; {nil,'intense,'faint,'monochrome}

 ;; Options for `modus-themes-region' are either nil (the default),
 ;; or a list of properties that may include any of those symbols:
 ;; `no-extend', `bg-only', `accented'
 modus-themes-region '(accented)

 ;; Options for `modus-themes-diffs': nil, 'desaturated, 'bg-only
 modus-themes-diffs nil

 modus-themes-org-blocks 'gray-background ; {nil,'gray-background,'tinted-background}

 modus-themes-org-agenda ; this is an alist: read the manual or its doc string
 '((header-block . (variable-pitch light 1.6))
   (header-date . (underline-today grayscale workaholic 1.2))
   (event . (accented italic varied))
   (scheduled . rainbow)
   (habit . simplified))

 ;; The `modus-themes-headings' is an alist with lots of possible
 ;; combinations, include per-heading-level tweaks: read the
 ;; manual or its doc string
 modus-themes-headings
 '((0 . (variable-pitch light (height 2.2)))
   (1 . (rainbow variable-pitch light (height 1.6)))
   (2 . (rainbow variable-pitch light (height 1.4)))
   (3 . (rainbow variable-pitch regular (height 1.3)))
   (4 . (rainbow regular (height 1.2)))
   (5 . (rainbow (height 1.1)))
   (t . (variable-pitch extrabold))))

(use-package! theme-changer
  :commands change-theme)

(setq doom-theme 'modus-operandi)

(use-package! doom-themes
  :config
  (defun my/modus-themes-custom-faces ()
    (set-face-attribute 'cursor nil :background (modus-themes-color 'blue-alt-faint))
    (custom-set-faces! `(cursor nil :background ,(modus-themes-color 'blue-alt-faint)))
    (set-face-attribute 'font-lock-type-face nil :foreground (modus-themes-color 'magenta-alt)))
  (add-hook 'modus-themes-after-load-theme-hook #'my/modus-themes-custom-faces))


#+end_src
**** Theme switching
#+begin_src emacs-lisp
(setq doom-theme 'modus-operandi)

(map! :leader
      :desc "Modus theme" "t t" #'modus-themes-toggle)
#+end_src
** LSP
#+begin_src  emacs-lisp
(setq
 lsp-completion-enable t
 lsp-enable-snippet t
 lsp-enable-folding t
 lsp-enable-indentation t
 lsp-enable-file-watchers t
 lsp-enable-on-type-formatting t
 lsp-enable-relative-indentation t
 lsp-enable-semantic-highlighting t)
#+end_src
** DAP
Trying out DAP for my debugger
#+begin_src  emacs-lisp
(after! dap-mode
  (setq dap-python-debugger 'debugpy))

(map! :map dap-mode-map
      :leader
      :prefix ("d" . "dap")
      ;; basics
      :desc "dap next"          "n" #'dap-next
      :desc "dap step in"       "i" #'dap-step-in
      :desc "dap step out"      "o" #'dap-step-out
      :desc "dap continue"      "c" #'dap-continue
      :desc "dap hydra"         "h" #'dap-hydra
      :desc "dap debug restart" "r" #'dap-debug-restart
      :desc "dap debug"         "s" #'dap-debug

      ;; debug
      :prefix ("dd" . "Debug")
      :desc "dap debug recent"  "r" #'dap-debug-recent
      :desc "dap debug last"    "l" #'dap-debug-last

      ;; eval
      :prefix ("de" . "Eval")
      :desc "eval"                "e" #'dap-eval
      :desc "eval region"         "r" #'dap-eval-region
      :desc "eval thing at point" "s" #'dap-eval-thing-at-point
      :desc "add expression"      "a" #'dap-ui-expressions-add
      :desc "remove expression"   "d" #'dap-ui-expressions-remove

      :prefix ("db" . "Breakpoint")
      :desc "dap breakpoint toggle"      "b" #'dap-breakpoint-toggle
      :desc "dap breakpoint condition"   "c" #'dap-breakpoint-condition
      :desc "dap breakpoint hit count"   "h" #'dap-breakpoint-hit-condition
      :desc "dap breakpoint log message" "l" #'dap-breakpoint-log-message)
#+end_src

** Email
To get my [[*Detroit Mercy email]] to work, I am actually using a patched version of =isync=. I added these patches to the brewfile for =isync=.
*** Setup
:PROPERTIES:
:header-args: :sh :tangle no :eval never
:END:
Install deps on a mac.
#+begin_src sh :eval never
brew install isync msmtp mu openssl@1.1
#+end_src

Setup =mu=.
#+begin_src sh :eval never
mkdir -p ~/.local/mail/{kbakheat-gmail, kirolsb5-gmail, bakheakm-udmercy}
mbsync -a -c ~/.mbsyncrc && \
mu init \
  --maildir ~/.local/mail/ \
  --my-address kbakheat@gmail.com \
  --my-address kirolsb5@gmail.com \
  --my-address bakheakm@udmercy.edu \
  && \
mu index
#+end_src
*** =emacs=
#+begin_src emacs-lisp
(use-package! mu4e
  :init (if (eq system-type 'darwin)
            (add-to-list 'load-path "/opt/homebrew/share/emacs/site-lisp/mu/mu4e"))
  :commands =mu4e
  :config
  (map! :map mu4e-headers-mode-map
        :localleader
        (:desc "Update and index mail"  "u" #'mu4e-update-mail-and-index)
        (:desc "View in ..."            "v" #'mu4e-view-action))
  (imagemagick-register-types)
  (setq
   sendmail-program "msmtp"
   send-mail-function #'smtpmail-send-it
   message-sendmail-f-is-evil t
   message-sendmail-extra-arguments '("--read-envelope-from")
   message-send-mail-function #'message-send-mail-with-sendmail
   mu4e-attachment-dir "~/Downloads"
   mu4e-html2text-command "iconv -c -t utf-8 | pandoc -f html -t plain"
   mu4e-update-interval 300
   mu4e-use-fancy-chars t
   mu4e-view-show-addresses t
   mu4e-view-show-images t
   mu4e-change-filenames-when-moving t)
  (add-to-list 'mu4e-bookmarks
               '(:name "Last 7 days"
                 :query "date:7d..now AND NOT flag:trashed"
                 :key ?w))
  (add-to-list 'mu4e-bookmarks
               '(:name "Unread messages"
                 :query "flag:unread AND NOT flag:trashed"
                 :key ?u)))

(setq +mu4e-gmail-accounts
      '(("kbakheat@gmail.com" . "/kbakheat-gmail")
        ("kirolsb5@gmail.com" . "/kirolsb5-gmail")))
#+end_src
*** Config
**** =msmtp= defaults
#+begin_src conf :tangle ~/.config/msmtp/config
defaults
auth            on
tls             on
logfile         ~/.msmtp.log
#+end_src

**** =mbsync=, =msmtp=, and per-account setup
***** Main gmail
****** =emacs= config
#+begin_src emacs-lisp
(set-email-account! "kbakheat-gmail"
  '((mu4e-sent-folder       . "/kbakheat-gmail/Sent Mail")
    (mu4e-drafts-folder     . "/kbakheat-gmail/Drafts")
    (mu4e-trash-folder      . "/kbakheat-gmail/Trash")
    (mu4e-refile-folder     . "/kbakheat-gmail/All Mail")
    (smtpmail-smtp-user     . "kbakheat@gmail.com")
    (mu4e-compose-signature . "---\nKirols Bakheat"))
  t)
#+end_src

****** =mbsync= config
#+begin_src conf :tangle ~/.mbsyncrc
IMAPAccount             kbakheat-gmail
Host                    imap.gmail.com
User                    kbakheat@gmail.com
PassCmd                 "gpg --for-your-eyes-only -q --no-tty -d ~/.password-store/google.com/kbakheat-app-specific.gpg"
SSLType                 IMAPS
AuthMechs               Login

IMAPStore               kbakheat-gmail-remote
Account                 kbakheat-gmail

MaildirStore            kbakheat-gmail-local
SubFolders              Verbatim
Path                    ~/.local/mail/kbakheat-gmail/
Inbox                   ~/.local/mail/kbakheat-gmail/

Channel                 kbakheat-gmail
Far                     :kbakheat-gmail-remote:
Near                    :kbakheat-gmail-local:
Patterns                *
Create                  Both
Expunge                 Both
SyncState               *
MaxMessages             20000
CopyArrivalDate         yes
#+end_src
****** =msmtp= config
#+begin_src conf :tangle ~/.config/msmtp/config
account         kbakheat-gmail
host            smtp.gmail.com
port            587
tls_starttls    on
user            kbakheat@gmail.com
passwordeval    "gpg --for-your-eyes-only -q --no-tty -d ~/.password-store/google.com/kbakheat-app-specific.gpg"
from            kbakheat@gmail.com
account         default : kbakheat-gmail
#+end_src

***** Secondary gmail
****** =emacs= config
#+begin_src emacs-lisp
(set-email-account! "kirolsb5-gmail"
  '((mu4e-sent-folder       . "/kirolsb5-gmail/Sent Mail")
    (mu4e-drafts-folder     . "/kirolsb5-gmail/Drafts")
    (mu4e-trash-folder      . "/kirolsb5-gmail/Trash")
    (mu4e-refile-folder     . "/kirolsb5-gmail/All Mail")
    (smtpmail-smtp-user     . "kbakheat@gmail.com")
    (mu4e-compose-signature . "---\nKirols Bakheat"))
  t)
#+end_src

****** =mbsync= config
#+begin_src conf :tangle ~/.mbsyncrc
IMAPAccount             kirolsb5-gmail
Host                    imap.gmail.com
User                    kirolsb5@gmail.com
PassCmd                 "gpg --for-your-eyes-only -q --no-tty -d ~/.password-store/google.com/kirolsb5-app-specific.gpg"
SSLType                 IMAPS
AuthMechs               Login

IMAPStore               kirolsb5-gmail-remote
Account                 kirolsb5-gmail

MaildirStore            kirolsb5-gmail-local
SubFolders              Verbatim
Path                    ~/.local/mail/kirolsb5-gmail/
Inbox                   ~/.local/mail/kirolsb5-gmail/

Channel                 kirolsb5-gmail
Far                     :kirolsb5-gmail-remote:
Near                    :kirolsb5-gmail-local:
Patterns                *
Create                  Both
Expunge                 Both
SyncState               *
CopyArrivalDate         yes
#+end_src
****** =msmtp= config
#+begin_src conf :tangle ~/.config/msmtp/config
account         kirolsb5-gmail
host            smtp.gmail.com
port            587
tls_starttls    on
user            kirolsb5@gmail.com
passwordeval    "gpg --for-your-eyes-only -q --no-tty -d ~/.password-store/google.com/kirolsb5-app-specific.gpg"
from            kirolsb5@gmail.com
#+end_src
***** Detroit Mercy email
****** =emacs= config
#+begin_src emacs-lisp
(set-email-account! "bakheakm-udmercy"
  '((mu4e-sent-folder       . "/bakheakm-udmercy/Sent Items")
    (mu4e-drafts-folder     . "/bakheakm-udmercy/Drafts")
    (mu4e-trash-folder      . "/bakheakm-udmercy.edu/Trash")
    (mu4e-refile-folder     . "/bakheakm-udmercy/Archive")
    (smtpmail-smtp-user     . "bakheakm@udmercy.edu")
    (mu4e-compose-signature . "---\nKirols Bakheat"))
  t)
#+end_src

****** =mbsync= config
#+begin_src conf :tangle ~/.mbsyncrc
IMAPAccount             bakheakm-udmercy
Host                    outlook.office365.com
User                    bakheakm@udmercy.edu
PassCmd                 "~/scripts/mutt_oauth2.py ~/.password-store/office.com/bakheakm@udmercy.edu.tokens"
SSLType                 IMAPS
AuthMechs               XOAUTH2
SSLVersions             TLSv1.2
Port                    993

IMAPStore               bakheakm-udmercy-remote
Account                 bakheakm-udmercy

MaildirStore            bakheakm-udmercy-local
Path                    ~/.local/mail/bakheakm-udmercy/
Inbox                   ~/.local/mail/bakheakm-udmercy/Inbox
SubFolders              Verbatim

Channel                 bakheakm-udmercy
Far                     :bakheakm-udmercy-remote:
Near                    :bakheakm-udmercy-local:
Patterns                *
Create                  Both
Expunge                 Both
Sync                    All
CopyArrivalDate         yes
#+end_src
****** =msmtp= config
#+begin_src conf :tangle ~/.config/msmtp/config
account         bakheakm-udmercy
host            smtp.office365.com
port            587
tls_starttls    on
auth            xoauth2
user            bakheakm@udmercy.edu
passwordeval    "mutt_oauth2.py ~/.password-store/office.com/bakheakm@udmercy.edu.tokens"
from            bakheakm@udmercy.edu
#+end_src
** Fonts
Setting fonts and some emojis.

#+begin_src  emacs-lisp
(use-package! mixed-pitch
  :hook (org-mode . mixed-pitch-mode)
  :config (setq mixed-pitch-face 'variable-pitch))
(use-package! emojify
  :hook (after-init . global-emojify-mode))

(setq doom-font                (font-spec :family "JetBrainsMono Nerd Font Mono" :size 17.0)
      doom-variable-pitch-font (font-spec :family "JetBrainsMono Nerd Font" :size 17.0)
      doom-unicode-font        (font-spec :family "JuliaMono" :size 16.0)
      doom-big-font            (font-spec :family "JetBrainsMono Nerd Font" :size 25.0))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+end_src

** =man= and =tldr=
#+begin_src  emacs-lisp :tangle packages.el
(package! tldr)
#+end_src

#+begin_src  emacs-lisp
(use-package! tldr
  :commands tldr
  :config (setq tldr-directory-path (expand-file-name "tldr/" doom-etc-dir)))
(map!
  :leader
   (:prefix-map ("h h" . "command line help")
    :desc "man" "m" #'man
    :desc "tldr" "t" #'tldr))
#+end_src
** =biblio=
#+begin_src emacs-lisp
(after! org-cite
  (setq org-cite-csl-styles-dir "~/.config/doom/citations/styles"))
(after! bibtex-completion
  (setq!
   bibtex-completion-bibliography  "~/.config/doom/citations/ref.bib"
   ;bibtex-completion-library-path '("/path/to/library/path/")
   ;bibtex-completion-notes-path "/path/to/your/notes/"
   ))
#+end_src
** =string-inflection=
I don't use this that often but it is convenient when I occasionally need it.

#+begin_src emacs-lisp :tangle packages.el
(package! string-inflection)
#+end_src
#+begin_src emacs-lisp
(use-package! string-inflection
  :commands (string-inflection-all-cycle
             string-inflection-toggle
             string-inflection-camelcase
             string-inflection-lower-camelcase
             string-inflection-kebab-case
             string-inflection-underscore
             string-inflection-capital-underscore
             string-inflection-upcase)
  :init
  (map! :leader :prefix ("c~" . "naming convention")
        :desc "cycle" "~" #'string-inflection-all-cycle
        :desc "toggle" "t" #'string-inflection-toggle
        :desc "CamelCase" "c" #'string-inflection-camelcase
        :desc "downCase" "d" #'string-inflection-lower-camelcase
        :desc "kebab-case" "k" #'string-inflection-kebab-case
        :desc "under_score" "_" #'string-inflection-underscore
        :desc "Upper_Score" "u" #'string-inflection-capital-underscore
        :desc "UP_CASE" "U" #'string-inflection-upcase)
  (after! evil
    (evil-define-operator evil-operator-string-inflection (beg end _type)
      "Define a new evil operator that cycles symbol casing."
      :move-point nil
      (interactive "<R>")
      (string-inflection-all-cycle)
      (setq evil-repeat-info '([?g ?~])))
    (define-key evil-normal-state-map (kbd "g~") 'evil-operator-string-inflection)))
#+end_src
** Github Copilot
#+begin_src emacs-lisp :tangle packages.el
(package! copilot
  :recipe (:host github :repo "zerolfx/copilot.el" :files ("*.el" "dist")))
#+end_src

#+begin_src emacs-lisp
(defun my-tab ()
  (interactive)
  (or (copilot-accept-completion)
      (company-indent-or-complete-common nil)))

(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :hook (text-mode . copilot-mode)
  :bind (("C-TAB" . 'copilot-accept-completion-by-word)
         ("C-<tab>" . 'copilot-accept-completion-by-word)
         :map company-active-map
         ("<tab>" . 'my-tab)
         ("TAB" . 'my-tab)
         :map company-mode-map
         ("<tab>" . 'my-tab)
         ("TAB" . 'my-tab))
  :config
  (if (eq system-type 'darwin)
      (setq copilot-node-executable "/opt/homebrew/opt/node@16/bin/node")))
#+end_src
** Org mode
*** General config
#+begin_src  emacs-lisp
(defun my/relative-org (dir)
  "Makes a sting representing a directory relative to my org base directory"
  (setq my-org-base-dir "~/org")
  (concat (file-name-as-directory my-org-base-dir) dir))
(setq
 org-directory (my/relative-org "general")
 deft-directory (my/relative-org "deft"))

(after! org
  (add-to-list 'org-latex-packages-alist '("" "fancyhdr"))
  (add-to-list 'org-latex-packages-alist '("" "siunitx"))
  (plist-put org-format-latex-options :scale 1)
  (setq
   org-insert-heading-respect-content nil
   org-export-in-background t
   org-export-with-sub-superscripts '{}
   org-list-allow-alphabetical t)
  (map! :map org-mode-map
              :localleader
              (:prefix ("SPC" . "Personal org map")))


  (defun locally-defer-font-lock ()
    "Set jit-lock defer and stealth, when buffer is over a certain size."
    (when (> (buffer-size) 50000)
      (setq-local jit-lock-defer-time 0.05
                  jit-lock-stealth-time 1)))
  (add-hook 'org-mode-hook #'locally-defer-font-lock))
#+end_src
*** =org-babel= default /header-args/
#+begin_src emacs-lisp
(after! org
  (setq
   org-babel-default-header-args
   '((:results . "replace")
     (:exports . "both")
     (:cache . "yes")
     (:noweb . "yes")
     (:hlines . "no")
     (:async . "yes")
     (:mkdirp . "yes")
     (:tangle . "no"))))
#+end_src
*** Beautification of org-mode
**** =org= specific config
#+begin_src emacs-lisp
(after! org
  (setq
   org-auto-align-tags t
   org-tags-column 0
   org-catch-invisible-edits 'smart
   org-special-ctrl-a/e t
   org-insert-heading-respect-content t

   org-fontify-quote-and-verse-blocks t
   org-fontify-whole-heading-line t
   org-fontify-done-headline t
   org-src-fontify-natively t

   org-ellipsis "↷"
   org-hide-emphasis-markers t
   org-pretty-entities t)
  (custom-set-faces!
    '(org-document-title :weight extra-bold :height 1.3)
    '(outline-1 :weight extra-bold :height 1.25)
    '(outline-2 :weight bold :height 1.15)
    '(outline-3 :weight bold :height 1.12)
    '(outline-4 :weight semi-bold :height 1.09)
    '(outline-5 :weight semi-bold :height 1.06)
    '(outline-6 :weight semi-bold :height 1.03)
    '(outline-8 :weight semi-bold)
    '(outline-9 :weight semi-bold)))
#+end_src
**** =org-agenda=
#+begin_src emacs-lisp
(use-package! org-agenda
  :config (setq
           org-agenda-tags-column 0
           org-agenda-block-separator ?─
           org-agenda-time-grid
             '((daily today require-timed)
               (800 1000 1200 1400 1600 1800 2000)
               " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
           org-agenda-current-time-string
             "⭠ now ─────────────────────────────────────────────────"))
#+end_src
**** =org-modern=
#+begin_src emacs-lisp :tangle packages.el
(package! org-modern)
#+end_src

#+begin_src emacs-lisp
(use-package! org-modern
  :hook (org-mode . org-modern-mode)
  :init (setq
         org-modern-variable-pitch t
         org-modern-timestamp t
         org-modern-table t
         org-modern-table-vertical 2
         org-modern-table-horizontal 1.2
         org-modern-star '("⦿" "⦾" "◉" "○" "◈" "◇" "‣" "⁍")))

#+end_src
*** Roam
#+begin_src emacs-lisp
(setq org-roam-v2-ack t)
(after! org-roam
  (setq
   org-roam-directory (my/relative-org "roam")
   org-roam-completion-everywhere t))
#+end_src
**** Templates
#+begin_src emacs-lisp
(after! org-roam
  (add-to-list 'org-roam-capture-templates
               '("r" "Templates for religious meditations"))
  (add-to-list
   'org-roam-capture-templates
   '("rs" "Saint" plain "#+filetags: \"Saint Type: ${saint type}\" \"Years: ${birth year}-${death year}\" \"Country: ${country}\" \"City: ${city}\"\n\n* Birth\n%?\n\n* Life\n\n\n* Death\n\n\n* Related saints\n\n"
     :if-new (file+head "religious/saints/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
     :unnarrowed t))
  (add-to-list
   'org-roam-capture-templates
   '("rb" "Bible Study" plain "#+filetags: \"Book: ${book}\" \"Topic: ${topic}\"\n\n* Topic\n\n* Related\n** Passages\n\n** Meditations\n\n* Personal Meditation\n\n"
     :if-new (file+head "religious/bible-study/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
     :unnarrowed t)))
#+end_src
*** Xenops
Originally had =fragtog= here but switched to =xenops= because it
doesn't interrupt my typing as bad. I don't like that this messes with other /doom/ keybindings though.

#+begin_src  emacs-lisp :tangle packages.el
(package! xenops)
#+end_src

#+begin_src  emacs-lisp
(use-package! xenops
  :commands (xenops-mode)
  :init (map! :map org-mode-map
              :localleader
              :desc "enable xenops" "SPC x" #'xenops-mode)
  :config (setq xenops-math-image-current-scale-factor 2.0))
#+end_src
*** Org-appear
#+begin_src  emacs-lisp :tangle packages.el
(package! org-appear)
#+end_src

#+begin_src  emacs-lisp
(use-package! org-appear
  :commands (org-appear-mode)
  :config (setq
           org-appear-autolinks t
           org-appear-autoentities t
           org-appear-autosubmarkers t ))
#+end_src
*** Org-auto-tangle
#+begin_src  emacs-lisp :tangle packages.el
(package! org-auto-tangle)
#+end_src

#+begin_src  emacs-lisp
(use-package! org-auto-tangle
  :hook (org-mode . org-auto-tangle-mode)
  :config (setq org-auto-tangle-default t))
#+end_src
*** =ox-latex=
**** Syntax highlighting
#+begin_src  emacs-lisp :tangle packages.el
(package! engrave-faces
  :recipe (:host github :repo "tecosaur/engrave-faces"))
#+end_src

#+name: engrave-faces-init
#+begin_src emacs-lisp
(defvar-local org-export-has-code-p nil)

(defadvice! org-export-expect-no-code (&rest _)
  :before #'org-export-as
  (setq org-export-has-code-p nil))

(defadvice! org-export-register-code (&rest _)
  :after #'org-latex-src-block
  :after #'org-latex-inline-src-block-engraved
  (setq org-export-has-code-p t))

(defadvice! org-latex-example-block-engraved (orig-fn example-block contents info)
  "Like `org-latex-example-block', but supporting an engraved backend"
  :around #'org-latex-example-block
  (let ((output-block (funcall orig-fn example-block contents info)))
    (if (eq 'engraved (plist-get info :latex-listings))
        (format "\\begin{Code}[alt]\n%s\n\\end{Code}" output-block)
      output-block)))
#+end_src

#+begin_src emacs-lisp :noweb yes
(use-package! engrave-faces-latex
  :after ox-latex
  :init
  <<engrave-faces-init>>
  :config
  (setq org-latex-listings 'engraved))
(use-package! engrave-faces-html
  :after ox-html
  :init
  <<engrave-faces-init>>
  :config
  (setq org-latex-listings 'engraved))
#+end_src
**** Classes
#+begin_src  emacs-lisp
(after! ox-latex
  (add-to-list 'org-latex-packages-alist '("" "siunitx"))
  (add-to-list 'org-latex-packages-alist '("" "amsmath"))
  (add-to-list 'org-latex-packages-alist '("" "fancyhdr"))
  (add-to-list 'org-latex-classes
               '("IEEEtran" "\\documentclass[11pt]{IEEEtran}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" .    "\\subparagraph*{%s}")))
  (add-to-list 'org-latex-classes
               '("exam"
                 "\\documentclass{exam}"
                 ("\\begin{questions} %% %s"
                  "\\end{questions}"
                  "\\begin{questions} %% %s"
                  "\\end{questions}")
                 ("\\question %s " . "\\question* %s")
                 ("\\begin{parts} %s"
                  "\\end{parts}"
                  "\\begin{parts} %s"
                  "\\end{parts}"))))
#+end_src
*** =literate-calc-mode=
#+begin_src  emacs-lisp :tangle packages.el
(package! literate-calc-mode)
#+end_src

#+begin_src  emacs-lisp
(use-package! literate-calc-mode
  :commands (literate-calc-minor-mode
             literate-calc-eval-line
             literate-calc-insert-results)
  :init (map! :map org-mode-map
              :localleader
              (:prefix ("SPC c" . "literate calc")
               (:desc "Enable" "e" #'literate-calc-minor-mode)
               (:desc "Evaluate line" "c" #'literate-calc-eval-line)
               (:desc "Insert results" "i" #'literate-calc-insert-results))))
#+end_src
*** =org-tree-slide-mode=
#+begin_src emacs-lisp
(use-package! org-tree-slide
  :config
  (map! :map org-tree-slide-mode-map
        :n "M-<left>"  #'org-tree-slide-move-previous-tree
        :n "M-<right>" #'org-tree-slide-move-next-tree))
#+end_src
*** Lilypond
Lilypond is useful for writing some sheet music which I occasionally do in emacs; mostly in org documents and mostly on my mac.

#+begin_src emacs-lisp :tangle packages.el
(if (eq system-type 'darwin)
    (package! lilypond
      :recipe (:local-repo "/opt/homebrew/share/emacs/site-lisp/lilypond/")))
#+end_src
#+begin_src emacs-lisp
(if (eq system-type 'darwin)
    (use-package! lilypond-mode
      :commands LilyPond-mode
      :init (defalias 'lilypond-mode 'LilyPond-mode)
      :config (setq org-babel-lilypond-commands '("/opt/homebrew/bin/lilypond" "open" "open"))))
#+end_src
* Footers

#+html: <details><summary>config.el</summary>

#+begin_src  emacs-lisp
(provide 'config)
;;; config.el ends here
#+end_src

#+html: </details>

#+html: <details><summary>init.el</summary>

#+begin_src  emacs-lisp :tangle init.el
(provide 'init)
;;; init.el ends here
#+end_src

#+html: </details>

#+html: <details><summary>init.el</summary>

#+begin_src  emacs-lisp :tangle packages.el
(provide 'packages)
;;; packages.el ends here
#+end_src

#+html: </details>
