;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
;; (setq user-full-name "John Doe"
;;      user-mail-address "john@doe.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; (setq doom-theme 'doom-one)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
;; (setq org-directory "~/org/")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
;; (setq display-line-numbers-type t)

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

(when-let ((site-start (locate-library "site-start.el")))
  (load site-start)
  (message "Loaded %s" site-start)
  (when (modulep! :tools pdf)
      (setq pdf-tools-installer-os "nixos")))

(setq
 gc-cons-threshold (* 100 1024 1024) ; 100mb
 gc-cons-percentage 0.6
 read-process-output-max (* 5 1024 1024)) ; 5mb)

(setq user-full-name "Kirols Bakheat"
      user-mail-address "kbakheat@gmail.com")

(after! undo-tree
  (map! :leader
        "o U" nil
        :desc "Undo tree" "o u" #'undo-tree-visualize)
  (setq undo-tree-auto-save-history t
        undo-tree-visualizer-diff t
        undo-tree-visualizer-timestamps t))

(defvar my/snippets-dir (expand-file-name "snippets/" doom-user-dir))
(after! yasnippet
  (add-to-list 'yas-snippet-dirs 'my/snippets-dir)
    (yas-load-directory my/snippets-dir t))

(after! evil-collection
  (setq select-enable-clipboard nil))

(cond (IS-MAC
       (setq mac-command-modifier       'meta
             mac-option-modifier        'meta
             mac-right-option-modifier  'alt)))

(map! :leader
      (:desc "M-x" ";" #'execute-extended-command)
      (:desc "eval-expression" ":" #'pp-eval-expression))

(map! :leader
      (:desc "Reompile" "c c" #'recompile)
      (:desc "Compile" "c C" #'compile))

(defvar my/debug-on-error nil)
(defun my/toggle-debug-on-error ()
  "Toggle debug-on-error."
  (interactive)
  (setq my/debug-on-error (not my/debug-on-error))
  (setq debug-on-error my/debug-on-error)
  (setq async-debug my/debug-on-error)
  (setq org-export-async-debug my/debug-on-error)
  (message "debug-on-error is %s" my/debug-on-error))


(map! :leader
      (:desc "Debug on error" "t d" #'my/toggle-debug-on-error))

(map! :leader
      (:desc "Pass" "o p" #'pass))

(map! :leader
       (:desc "Comment/uncomment lines" "t /" #'comment-line))

(after! vterm
  (setq vterm-shell "fish"))

(defun my/xwidget-window-close ()
  "Alternative to `evil-collection-xwidget-webkit-close-tab'. This both closes the tab and closes the window"
  (interactive)
  (evil-collection-xwidget-webkit-close-tab)
  (evil-window-delete)
  (xwidget-cleanup))
(map! :map xwidget-webkit-mode-map
      "q" 'my/xwidget-window-close)
(setq browse-url-browser-function 'xwidget-webkit-browse-url)

(map! :leader
      (:desc "xwidget-webkit" "o w" #'xwidget-webkit-browse-url))

(use-package! xwwp-full
  :commands (xwwp-section
             xwwp-follow-link
             xwwp-ace-toggle
             xwwp-history-show)
  :init (map! :map xwidget-webkit-mode-map
              :localleader
              (:desc "Jump to section"  "s" #'xwwp-section)
              (:desc "Follow link"      "l" #'xwwp-follow-link)
              (:desc "Ace"              "a" #'xwwp-ace-toggle)
              (:desc "History"          "h" #'xwwp-history-show))
  :config (use-package! ctable))

(setq global-auto-revert-non-file-buffers t)

(defun my/age-github-keys-for (username)
  "Turn GitHub USERNAME into a list of ssh public keys."
  (let* ((res (shell-command-to-string
               (format "curl -s https://api.github.com/users/%s/keys"
                       (shell-quote-argument username))))
         (json (json-parse-string res :object-type 'alist)))
    (cl-assert (arrayp json))
    (cl-loop for alist across json
             for key = (cdr (assoc 'key alist))
             when (and (stringp key)
                       (string-match-p "^\\(ssh-rsa\\|ssh-ed25519\\) AAAA" key))
             collect key)))

(defun my/age-save-with-github-recipient (username)
  "Encrypt an age file to the public keys of GitHub USERNAME."
  (interactive "MGitHub username: ")
  (cl-letf (((symbol-value 'age-default-recipient)
             (append (if (listp age-default-recipient)
                         age-default-recipient
                       (list age-default-recipient))
                     (my/age-github-keys-for username))))
    (save-buffer)))

(my/age-github-keys-for "kero0")


(use-package! age
  :mode "\\.age\\'"
  :init (age-file-enable)
  :config (setq age-default-identity "~/.ssh/id_ed25519.pub"
                age-encrypt-to '(my/age-github-keys-for "kero0")))

(setq auto-save-default t
      make-backup-files t)

(setq
 display-line-numbers-type 'relative
 which-key-idle-delay 1)

(unless
    (equal
     "Battery status not available"
     (battery))
  (display-battery-mode 1)
  (setq battery-mode-line-format "[%b%p%% %t]"))
(setq doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))

(solaire-global-mode +1)
(map! :leader
      :desc "Load new theme" "h t" #'load-theme)

(setq
 modus-themes-italic-constructs t
 modus-themes-bold-constructs t
 modus-themes-subtle-line-numbers nil
 modus-themes-tabs-accented t
 modus-themes-variable-pitch-ui t
 modus-themes-inhibit-reload t ; only applies to `customize-set-variable' and related

 modus-themes-fringes 'intense ; {nil,'subtle,'intense}

 ;; Options for `modus-themes-lang-checkers' are either nil (the
 ;; default), or a list of properties that may include any of those
 ;; symbols: `straight-underline', `text-also', `background',
 ;; `intense' OR `faint'.
 modus-themes-lang-checkers '(straight-underline text-also background faint)

 ;; Options for `modus-themes-mode-line' are either nil, or a list
 ;; that can combine any of `3d' OR `moody', `borderless',
 ;; `accented', a natural number for extra padding (or a cons cell
 ;; of padding and NATNUM), and a floating point for the height of
 ;; the text relative to the base font size (or a cons cell of
 ;; height and FLOAT)
 modus-themes-mode-line '(borderless accented)

 ;; Options for `modus-themes-syntax' are either nil (the default),
 ;; or a list of properties that may include any of those symbols:
 ;; `faint', `yellow-comments', `green-strings', `alt-syntax'
 modus-themes-syntax '(yellow-comments green-strings alt-syntax)

 ;; Options for `modus-themes-hl-line' are either nil (the default),
 ;; or a list of properties that may include any of those symbols:
 ;; `accented', `underline', `intense'
 modus-themes-hl-line '(accented)

 ;; Options for `modus-themes-paren-match' are either nil (the
 ;; default), or a list of properties that may include any of those
 ;; symbols: `bold', `intense', `underline'
 modus-themes-paren-match '(bold intense)

 ;; Options for `modus-themes-links' are either nil (the default),
 ;; or a list of properties that may include any of those symbols:
 ;; `neutral-underline' OR `no-underline', `faint' OR `no-color',
 ;; `bold', `italic', `background'
 modus-themes-links '(neutral-underline italic)

 ;; Options for `modus-themes-prompts' are either nil (the
 ;; default), or a list of properties that may include any of those
 ;; symbols: `background', `bold', `gray', `intense', `italic'
 modus-themes-prompts '(background bold intense italic)

 ;; The `modus-themes-completions' is an alist that reads three
 ;; keys: `matches', `selection', `popup'.  Each accepts a nil
 ;; value (or empty list) or a list of properties that can include
 ;; any of the following (for WEIGHT read further below):
 ;;
 ;; `matches' - `background', `intense', `underline', `italic', WEIGHT
 ;; `selection' - `accented', `intense', `underline', `italic', `text-also', WEIGHT
 ;; `popup' - same as `selected'
 ;; `t' - applies to any key not explicitly referenced (check docs)
 ;;
 ;; WEIGHT is a symbol such as `semibold', `light', or anything
 ;; covered in `modus-themes-weights'.  Bold is used in the absence
 ;; of an explicit WEIGHT.
 modus-themes-completions
 '((matches . (semibold))
   (selection . (extrabold accented))
   (popup . (extrabold accented)))

 modus-themes-mail-citations 'faint ; {nil,'intense,'faint,'monochrome}

 ;; Options for `modus-themes-region' are either nil (the default),
 ;; or a list of properties that may include any of those symbols:
 ;; `no-extend', `bg-only', `accented'
 modus-themes-region '(accented)

 ;; Options for `modus-themes-diffs': nil, 'desaturated, 'bg-only
 modus-themes-diffs nil

 modus-themes-org-blocks 'tinted-background ; {nil,'gray-background,'tinted-background}

 modus-themes-org-agenda ; this is an alist: read the manual or its doc string
 '((header-block . (variable-pitch light 1.6))
   (header-date . (underline-today grayscale workaholic 1.2))
   (event . (accented italic varied))
   (scheduled . rainbow)
   (habit . simplified))

 ;; The `modus-themes-headings' is an alist with lots of possible
 ;; combinations, include per-heading-level tweaks: read the
 ;; manual or its doc string
 modus-themes-headings
 '((0 . (variable-pitch light (height 2.2)))
   (1 . (rainbow variable-pitch light (height 1.6)))
   (2 . (rainbow variable-pitch light (height 1.4)))
   (3 . (rainbow variable-pitch regular (height 1.3)))
   (4 . (rainbow regular (height 1.2)))
   (5 . (rainbow (height 1.1)))
   (t . (variable-pitch extrabold))))

(setq doom-theme 'modus-operandi)

(defun my/modus-themes-custom-faces ()
  (modus-themes-with-colors
    (custom-set-faces
     ;; Replace green with blue if you use `modus-themes-deuteranopia'.
     `(git-gutter-fr:added ((,class :foreground ,green-fringe-bg)))
     `(git-gutter-fr:deleted ((,class :foreground ,red-fringe-bg)))
     `(git-gutter-fr:modified ((,class :foreground ,yellow-fringe-bg)))))
  (set-face-attribute 'cursor nil :background (modus-themes-color 'blue-alt-faint))
  (custom-set-faces! `(cursor nil :background ,(modus-themes-color 'blue-alt-faint)))
  (set-face-attribute 'font-lock-type-face nil :foreground (modus-themes-color 'magenta-alt)))
(add-hook 'modus-themes-after-load-theme-hook #'my/modus-themes-custom-faces)

(setq doom-theme 'modus-operandi)

(if (and IS-MAC (display-graphic-p) (boundp 'ns-system-appearance-change-functions))
    (add-hook 'ns-system-appearance-change-functions
               '(lambda (appearance)
                  (pcase appearance
                    ('light (modus-themes-load-operandi))
                    ('dark (modus-themes-load-vivendi))))))

(map! :leader
      :desc "Modus theme" "t t" #'modus-themes-toggle)

(use-package! mixed-pitch
  :hook (org-mode . mixed-pitch-mode)
  :config (setq mixed-pitch-face 'variable-pitch))
(use-package! emojify
  :hook (after-init . global-emojify-mode))

(setq doom-font                (font-spec :family "JetBrainsMono Nerd Font Mono" :size 18.0)
      doom-variable-pitch-font (font-spec :family "JetBrainsMono Nerd Font" :size 18.0)
      doom-unicode-font        (font-spec :family "JuliaMono" :size 18.0)
      doom-big-font            (font-spec :family "JetBrainsMono Nerd Font" :size 23.0))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(use-package! doom-themes)
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))

(when (and (modulep! :tools lsp +eglot) (modulep! :checkers syntax))
  (delq! 'eglot flycheck-checkers))

(after! lsp
  (when (and (modulep! :tools lsp) (not (modulep! :tools lsp +eglot)))
    (setq
     lsp-completion-enable t
     lsp-enable-snippet t
     lsp-enable-indentation t
     lsp-enable-file-watchers t
     lsp-enable-on-type-formatting nil
     lsp-enable-relative-indentation t
     lsp-enable-semantic-highlighting t
     lsp-lens-enable nil
     lsp-headerline-breadcrumb-enable nil
     lsp-eldoc-enable-hover t
     lsp-signature-auto-activate t
     lsp-signature-render-documentation t)))

(after! rustic
  (map! :map rustic-mode-map
        :localleader
        (:desc "Cargo run" "r" #'lsp-rust-analyzer-run)
        (:desc "Expand macro" "m" #'lsp-rust-analyzer-expand-macro))
  (setq lsp-rust-analyzer-display-chaining-hints t
        lsp-rust-analyzer-display-parameter-hints t
        lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial"
        lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names t
        lsp-rust-analyzer-display-closure-return-type-hints t
        lsp-rust-analyzer-display-reborrow-hints t))

(cl-defmacro lsp-org-babel-enable (lang)
  "Support LANG in org source code block."
  (setq centaur-lsp 'lsp-mode)
  (cl-check-type lang stringp)
  (let* ((edit-pre (intern (format "org-babel-edit-prep:%s" lang)))
         (intern-pre (intern (format "lsp--%s" (symbol-name edit-pre)))))
    `(progn
       (defun ,intern-pre (info)
         (let ((file-name (->> info caddr (alist-get :file))))
           (unless file-name
             (setq file-name (make-temp-file "babel-lsp-")))
           (setq buffer-file-name file-name)
           (lsp-deferred)))
       (put ',intern-pre 'function-documentation
            (format "Enable lsp-mode in the buffer of org source block (%s)."
                    (upcase ,lang)))
       (if (fboundp ',edit-pre)
           (advice-add ',edit-pre :after ',intern-pre)
         (progn
           (defun ,edit-pre (info)
             (,intern-pre info))
           (put ',edit-pre 'function-documentation
                (format "Prepare local buffer environment for org source block (%s)."
                        (upcase ,lang))))))))
(defvar org-babel-lang-list
  '("python" "ipython" "bash" "sh" "haskell"))
(dolist (lang org-babel-lang-list)
  (eval `(lsp-org-babel-enable ,lang)))

(after! lsp-rust
  (setq lsp-rust-analyzer-debug-lens-extra-dap-args
        `(:MIMode "lldb"
          :miDebuggerPath ,(f-join doom-local-dir "etc/dap-extension/vscode/cpptools/extension/debugAdapters/lldb-mi/bin/lldb-mi")
          :stopAtEntry t
          :externalConsole
          :json-false)))
;; (after! dap-cpptools
;;   (dap-register-debug-template "Rust::CppTools Run Configuration"
;;                                `(:type "cppdbg"
;;                                  :request "launch"
;;                                  :name "Rust::Run ${workspaceFolderBasename}"
;;                                  :MIMode "lldb"
;;                                  :miDebuggerPath ,(f-join doom-local-dir "etc/dap-extension/vscode/cpptools/extension/debugAdapters/lldb-mi/bin/lldb-mi")
;;                                  :environment []
;;                                  :program "${workspaceFolder}/target/debug/${workspaceRootFolderBasename}"
;;                                  :args []
;;                                  :cwd "${workspaceFolder}"
;;                                  :console "external"
;;                                  :dap-compilation "cargo build"
;;                                  :dap-compilation-dir "${workspaceFolder}")))

(after! dap-mode
  (setq dap-python-debugger 'debugpy))

(map! :map dap-mode-map
      :leader
      :prefix ("d" . "dap")
      ;; basics
      :desc "dap next"          "n" #'dap-next
      :desc "dap step in"       "i" #'dap-step-in
      :desc "dap step out"      "o" #'dap-step-out
      :desc "dap continue"      "c" #'dap-continue
      :desc "dap hydra"         "h" #'dap-hydra
      :desc "dap debug restart" "r" #'dap-debug-restart
      :desc "dap quit"          "q" #'+debugger/quit

      ;; debug
      :prefix ("dd" . "Debug")
      :desc "dap debug recent"  "r" #'dap-debug-recent
      :desc "dap debug last"    "l" #'dap-debug-last
      :desc "dap debug"         "s" #'dap-debug

      ;; eval
      :prefix ("de" . "Eval")
      :desc "eval"                "e" #'dap-eval
      :desc "eval region"         "r" #'dap-eval-region
      :desc "eval thing at point" "s" #'dap-eval-thing-at-point
      :desc "add expression"      "a" #'dap-ui-expressions-add
      :desc "remove expression"   "d" #'dap-ui-expressions-remove

      :prefix ("db" . "Breakpoint")
      :desc "dap breakpoint toggle"      "b" #'dap-breakpoint-toggle
      :desc "dap breakpoint condition"   "c" #'dap-breakpoint-condition
      :desc "dap breakpoint hit count"   "h" #'dap-breakpoint-hit-condition
      :desc "dap breakpoint log message" "l" #'dap-breakpoint-log-message)

(after! mu4e
  (map! :map mu4e-headers-mode-map
        :localleader
        (:desc "Update and index mail"  "u" #'mu4e-update-mail-and-index)
        (:desc "View in ..."            "v" #'mu4e-view-action))
  (imagemagick-register-types)
  (defun my/mu-filter (s)
    (concat "(" s ") AND (NOT flag:trashed) AND (NOT maildir:/.*\/spam|Junk\ Email/)"))
  (defvar my/vip-emails '("pmegally@gmail.com"
                          "stmarkmi@ccbchurch.com"
                          "/.+@udmercy.edu/"
                          "/.+@ford.com/"))
  (defun my/mu-filter-vip (s)
    (mu-filter (mapconcat #'(lambda (x) (concat "from:" x)) my/vip-emails " OR ")))
  (setq
   sendmail-program "msmtp"
   send-mail-function #'smtpmail-send-it
   message-sendmail-f-is-evil t
   message-sendmail-extra-arguments '("--read-envelope-from")
   message-send-mail-function #'message-send-mail-with-sendmail
   mu4e-attachment-dir "~/Downloads"
   mu4e-update-interval 300
   mu4e-use-fancy-chars t
   mu4e-change-filenames-when-moving t))
   ;; mu4e-bookmarks '((:name "Unread messages"      :query (my/mu-filter "flag:unread")     :key ?u)
   ;;                  (:name "Today's messages"     :query (my/mu-filter "date:today..now") :key ?t)
   ;;                  (:name "Last 7 days"          :query (my/mu-filter "date:7d..now")    :key ?w)
   ;;                  (:name "Messages with images" :query (my/mu-filter "mime:image/*")    :key ?i)
   ;;                  (:name "Work emails"          :query "from:/.+@ford.com/"             :key ?k)
   ;;                  (:name "VIP emails"           :query (my/mu-filter-vip my/vip-emails) :key ?v)
   ;;                  (:name "All messages"         :query ""                               :key ?a))))

(set-email-account! "primary"
  '((mu4e-sent-folder       . "/kbakheat-gmail/Sent Mail")
    (mu4e-drafts-folder     . "/kbakheat-gmail/Drafts")
    (mu4e-trash-folder      . "/kbakheat-gmail/Trash")
    (mu4e-refile-folder     . "/kbakheat-gmail/All Mail")
    (smtpmail-smtp-user     . "kbakheat@gmail.com")
    (mu4e-compose-signature . "---\nKirols Bakheat"))
  t)

(set-email-account! "secondary"
  '((mu4e-sent-folder       . "/kirolsb5-gmail/Sent Mail")
    (mu4e-drafts-folder     . "/kirolsb5-gmail/Drafts")
    (mu4e-trash-folder      . "/kirolsb5-gmail/Trash")
    (mu4e-refile-folder     . "/kirolsb5-gmail/All Mail")
    (smtpmail-smtp-user     . "kbakheat@gmail.com")
    (mu4e-compose-signature . "---\nKirols Bakheat"))
  t)

(set-email-account! "udmercy"
  '((mu4e-sent-folder       . "/bakheakm-udmercy/Sent Items")
    (mu4e-drafts-folder     . "/bakheakm-udmercy/Drafts")
    (mu4e-trash-folder      . "/bakheakm-udmercy.edu/Trash")
    (mu4e-refile-folder     . "/bakheakm-udmercy/Archive")
    (smtpmail-smtp-user     . "bakheakm@udmercy.edu")
    (mu4e-compose-signature . "---\nKirols Bakheat"))
  t)

(use-package! tldr
  :commands tldr
  :config (setq tldr-directory-path (expand-file-name "tldr/" doom-data-dir)))
(map!
 :leader :prefix ("h h" . "command line help")
 :desc "man" "m" #'man
 :desc "tldr" "t" #'tldr)

(defvar my/citations-dir
  (concat doom-user-dir "citations/"))

(after! org-cite
  (setq org-cite-csl-styles-dir (concat my/citations-dir "styles/")))
(after! bibtex-completion
  (setq!
   bibtex-completion-bibliography  (concat my/citations-dir "ref.bib")
   ;bibtex-completion-library-path '("/path/to/library/path/")
   ;bibtex-completion-notes-path "/path/to/your/notes/"
   ))

(use-package! lice
  :commands lice)
(map!
 :leader
 :desc "Insert license" "i l" #'lice)

(use-package! string-inflection
  :commands (string-inflection-all-cycle
             string-inflection-toggle
             string-inflection-camelcase
             string-inflection-lower-camelcase
             string-inflection-kebab-case
             string-inflection-underscore
             string-inflection-capital-underscore
             string-inflection-upcase)
  :init
  (map! :leader :prefix ("c~" . "naming convention")
        :desc "cycle" "~" #'string-inflection-all-cycle
        :desc "toggle" "t" #'string-inflection-toggle
        :desc "CamelCase" "c" #'string-inflection-camelcase
        :desc "downCase" "d" #'string-inflection-lower-camelcase
        :desc "kebab-case" "k" #'string-inflection-kebab-case
        :desc "under_score" "_" #'string-inflection-underscore
        :desc "Upper_Score" "u" #'string-inflection-capital-underscore
        :desc "UP_CASE" "U" #'string-inflection-upcase)
  (after! evil
    (evil-define-operator evil-operator-string-inflection (beg end _type)
      "Define a new evil operator that cycles symbol casing."
      :move-point nil
      (interactive "<R>")
      (string-inflection-all-cycle)
      (setq evil-repeat-info '([?g ?~])))
    (define-key evil-normal-state-map (kbd "g~") 'evil-operator-string-inflection)))

(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :hook (text-mode . copilot-mode)
  :bind (:map copilot-completion-map
              ("<right>"   . #'copilot-accept-completion)
              ("C-f"       . #'copilot-accept-completion)
              ("M-<right>" . #'copilot-accept-completion-by-word)
              ("M-f"       . #'copilot-accept-completion-by-word)
              ("C-e"       . #'copilot-accept-completion-by-line)
              ("<end>"     . #'copilot-accept-completion-by-line)
              ("M-n"       . #'copilot-next-completion)
              ("M-p"       . #'copilot-previous-completion))
  :config
  ;; Based on function from https://robert.kra.hn/posts/2023-02-22-copilot-emacs-setup/
  (defun copilot-complete-or-accept ()
    "Command that either triggers a completion or accepts one if one
is available."
    (interactive)
    (if (copilot--overlay-visible)
        (progn
          (copilot-accept-completion))
      (copilot-complete)))
  (defun cae-copilot-clear-overlay-h ()
    "Like `copilot-clear-overlay', but returns `t' if the overlay was visible."
    (when (copilot--overlay-visible)
      (copilot-clear-overlay) t))
  (add-hook! 'doom-escape-hook #'cae-copilot-clear-overlay-h))

(defun my/relative-org (dir)
  "Makes a sting representing a directory relative to my org base directory"
  (setq my-org-base-dir "~/org")
  (concat (file-name-as-directory my-org-base-dir) dir))
(setq
 org-directory (my/relative-org "general")
 deft-directory (my/relative-org "deft"))

(after! org
  (add-to-list 'org-latex-packages-alist '("" "fancyhdr"))
  (add-to-list 'org-latex-packages-alist '("" "siunitx"))
  (plist-put org-format-latex-options :scale 1)
  (setq
   org-insert-heading-respect-content nil
   org-export-in-background t
   org-export-with-sub-superscripts '{}
   org-list-allow-alphabetical t)
  (map! :map org-mode-map
        :localleader
        (:prefix ("SPC" . "Personal org map")))

  (setq org-clock-persist t)
  (org-clock-persistence-insinuate)

  (defun locally-defer-font-lock ()
    "Set jit-lock defer and stealth, when buffer is over a certain size."
    (when (> (buffer-size) 50000)
      (setq-local jit-lock-defer-time 0.05
                  jit-lock-stealth-time 1)))
  (add-hook 'org-mode-hook #'locally-defer-font-lock))

(after! org
  (setq
   org-babel-default-header-args
   '((:results . "replace")
     (:exports . "both")
     (:cache . "yes")
     (:noweb . "yes")
     (:hlines . "no")
     (:mkdirp . "yes")
     (:tangle . "no"))))

(after! org
  (setq
   org-auto-align-tags t
   org-tags-column 0
   org-catch-invisible-edits 'smart
   org-special-ctrl-a/e t
   org-insert-heading-respect-content t

   org-fontify-quote-and-verse-blocks t
   org-fontify-whole-heading-line t
   org-fontify-done-headline t
   org-src-fontify-natively t

   org-ellipsis "↷"
   org-hide-emphasis-markers t
   org-pretty-entities t))
  ;; (custom-set-faces!
  ;;   ;; '(org-document-title :weight extra-bold :height 2.0)
  ;;   '(org-level-1 :weight extra-bold :height 1.15)
  ;;   '(org-level-2 :weight bold :height 1.10)
  ;;   '(org-level-3 :weight semi-bold :height 1.08)
  ;;   '(org-level-4 :weight semi-bold :height 1.05)
  ;;   '(outline-1 :weight extra-bold :height 1.25)
  ;;   '(outline-2 :weight bold :height 1.15)
  ;;   '(outline-3 :weight bold :height 1.12)
  ;;   '(outline-4 :weight semi-bold :height 1.09)
  ;;   '(outline-5 :weight semi-bold :height 1.06)
  ;;   '(outline-6 :weight semi-bold :height 1.03)
  ;;   '(outline-8 :weight semi-bold)
  ;;   '(outline-9 :weight semi-bold)))

(after! org-agenda
  (setq
   org-agenda-tags-column 0
   org-agenda-block-separator ?─
   org-agenda-time-grid
   '((daily today require-timed)
     (800 1000 1200 1400 1600 1800 2000)
     " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
   org-agenda-current-time-string
   "⭠ now ─────────────────────────────────────────────────"))

(use-package! org-modern
  :hook (org-mode . org-modern-mode)
  :init (setq
         org-modern-variable-pitch t
         org-modern-timestamp t
         org-modern-table nil
         org-modern-table-vertical 2
         org-modern-table-horizontal 1.2
         org-modern-star '("⦿" "⦾" "◉" "○" "◈" "◇" "‣" "⁍")))

(setq org-roam-v2-ack t)
(after! org-roam
  (setq
   org-roam-directory (my/relative-org "roam")
   org-roam-completion-everywhere t))

(after! org-roam
  (add-to-list 'org-roam-capture-templates
               '("r" "Templates for religious meditations"))

  (add-to-list 'org-roam-capture-templates
               '("rl" "Lesson" plain "#+filetags: lesson \"Topic: ${topic}\"\n* %?"
                 :if-new (file+head "religious/lessons/%<%Y%m%d%H%M%S>-${slug}.org"
                                    "#+title: ${title}\n\n")
                 :unnarrowed t))

  (add-to-list
   'org-roam-capture-templates
   '("rs" "Saint" plain "#+filetags: saint \"Saint Type: ${saint type}\" \"Years: ${birth year}-${death year}\" \"Country: ${country}\" \"City: ${city}\"\n\n* Birth\n%?\n\n* Life\n\n\n* Death\n\n\n* Related saints\n\n"
     :if-new (file+head "religious/saints/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
     :unnarrowed t))
  (add-to-list
   'org-roam-capture-templates
   '("rb" "Bible Study" plain "#+filetags: \"bible study\" \"Book: ${book}\" \"Topic: ${topic}\"\n\n* Topic\n\n* Related\n** Passages\n\n** Meditations\n\n* Personal Meditation\n\n"
     :if-new (file+head "religious/bible-study/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
     :unnarrowed t)))

(use-package! xenops
  :commands (xenops-mode)
  :init (map! :map org-mode-map
              :localleader
              :desc "enable xenops" "SPC x" #'xenops-mode)
  :config (setq xenops-math-image-current-scale-factor 2.0))

(use-package! org-auto-tangle
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t))

(after! ox-latex
  (add-to-list 'org-latex-logfiles-extensions "tex"))

(defvar-local org-export-has-code-p nil)

(defadvice! org-export-expect-no-code (&rest _)
  :before #'org-export-as
  (setq org-export-has-code-p nil))

(defadvice! org-export-register-code (&rest _)
  :after #'org-latex-src-block
  :after #'org-latex-inline-src-block-engraved
  (setq org-export-has-code-p t))

(defadvice! org-latex-example-block-engraved (orig-fn example-block contents info)
  "Like `org-latex-example-block', but supporting an engraved backend"
  :around #'org-latex-example-block
  (let ((output-block (funcall orig-fn example-block contents info)))
    (if (eq 'engraved (plist-get info :latex-listings))
        (format "\\begin{Code}[alt]\n%s\n\\end{Code}" output-block)
      output-block)))

(use-package! engrave-faces-latex
  :after ox-latex
  :init
  (defvar-local org-export-has-code-p nil)
  
  (defadvice! org-export-expect-no-code (&rest _)
    :before #'org-export-as
    (setq org-export-has-code-p nil))
  
  (defadvice! org-export-register-code (&rest _)
    :after #'org-latex-src-block
    :after #'org-latex-inline-src-block-engraved
    (setq org-export-has-code-p t))
  
  (defadvice! org-latex-example-block-engraved (orig-fn example-block contents info)
    "Like `org-latex-example-block', but supporting an engraved backend"
    :around #'org-latex-example-block
    (let ((output-block (funcall orig-fn example-block contents info)))
      (if (eq 'engraved (plist-get info :latex-listings))
          (format "\\begin{Code}[alt]\n%s\n\\end{Code}" output-block)
        output-block)))
  :config
  (setq org-latex-listings 'engraved))
(use-package! engrave-faces-html
  :after ox-html
  :init
  (defvar-local org-export-has-code-p nil)
  
  (defadvice! org-export-expect-no-code (&rest _)
    :before #'org-export-as
    (setq org-export-has-code-p nil))
  
  (defadvice! org-export-register-code (&rest _)
    :after #'org-latex-src-block
    :after #'org-latex-inline-src-block-engraved
    (setq org-export-has-code-p t))
  
  (defadvice! org-latex-example-block-engraved (orig-fn example-block contents info)
    "Like `org-latex-example-block', but supporting an engraved backend"
    :around #'org-latex-example-block
    (let ((output-block (funcall orig-fn example-block contents info)))
      (if (eq 'engraved (plist-get info :latex-listings))
          (format "\\begin{Code}[alt]\n%s\n\\end{Code}" output-block)
        output-block)))
  :config
  (setq org-latex-listings 'engraved))

(use-package! ox-chameleon
  :after ox
  :config
  (add-to-list 'org-latex-packages-alist '("" "scrextend" nil))
  (add-to-list 'org-latex-packages-alist '("" "xcolor" nil)))

(after! ox-latex
  (add-to-list 'org-latex-packages-alist '("" "siunitx"))
  (add-to-list 'org-latex-packages-alist '("" "amsmath"))
  (add-to-list 'org-latex-packages-alist '("" "fancyhdr"))
  (add-to-list 'org-latex-classes
               '("IEEEtran" "\\documentclass[11pt]{IEEEtran}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" .    "\\subparagraph*{%s}")))
  (add-to-list 'org-latex-classes
               '("exam"
                 "\\documentclass{exam}"
                 ("\\begin{questions} %% %s"
                  "\\end{questions}"
                  "\\begin{questions} %% %s"
                  "\\end{questions}")
                 ("\\question %s " . "\\question* %s")
                 ("\\begin{parts} %s"
                  "\\end{parts}"
                  "\\begin{parts} %s"
                  "\\end{parts}"))))

(use-package! literate-calc-mode
  :commands (literate-calc-minor-mode
             literate-calc-eval-line
             literate-calc-insert-results)
  :init (map! :map org-mode-map
              :localleader
              (:prefix ("SPC c" . "literate calc")
               (:desc "Enable" "e" #'literate-calc-minor-mode)
               (:desc "Evaluate line" "c" #'literate-calc-eval-line)
               (:desc "Insert results" "i" #'literate-calc-insert-results))))

(use-package! org-tree-slide
  :config
  (map! :map org-tree-slide-mode-map
        :n "M-<left>"  #'org-tree-slide-move-previous-tree
        :n "M-<right>" #'org-tree-slide-move-next-tree))

(provide 'config)
;;; config.el ends here
